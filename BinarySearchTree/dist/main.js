!function(){"use strict";class e{constructor(e,t=null,r=null){this.value=e,this.right=t,this.left=r}getLeft(){return this.left}setLeft(e){this.left=e}getRight(){return this.right}setRight(e){this.right=e}setValue(e){this.value=e}}(()=>{const t=new class{constructor(){this.root=null,this.nodeCount=0}isEmpty(){return 0==this.size()}size(){return this.nodeCount}height(e=this.root){const t=e=>null==e?0:1+Math.max(t(e.left),t(e.right));return t(e)}insert(t){const r=new e(t),i=e=>{t<e.value?null!=e.getLeft()?i(e.getLeft()):(e.setLeft(r),this.nodeCount++):t>e.value&&(null!=e.getRight()?i(e.getRight()):(e.setRight(r),this.nodeCount++))};null===this.root?(this.root=r,this.nodeCount++):i(this.root)}remove(e,t=this.root){if(!t)return null;if(e<t.value)t.left=this.remove(e,t.left);else if(e>t.value)t.right=this.remove(e,t.right);else{if(!t.left)return t.right;if(!t.right)return t.left;t.value=this.min(t.right),t.right=this.remove(t.value,t.right)}return t}search(e){return this.postOrderTraverse().find((t=>t.value===e))}min(e=this.root){let t=e;for(;null!==t&&null!==t.left;)t=t.left;return t.value}max(e=this.root){let t=e;for(;null!==t&&null!==t.right;)t=t.right;return t.value}inOrderTraverse(e=this.root,t=[]){return null===e||(e.left&&t.push(...this.inOrderTraverse(e.left)),t.push(e),e.right&&t.push(...this.inOrderTraverse(e.right))),t}preOrderTraverse(e=this.root,t=[]){return null===e||(t.push(e),e.left&&t.push(...this.preOrderTraverse(e.left)),e.right&&t.push(...this.preOrderTraverse(e.right))),t}postOrderTraverse(e=this.root,t=[]){return null===e||(e.left&&t.push(...this.postOrderTraverse(e.left)),e.right&&t.push(...this.postOrderTraverse(e.right)),t.push(e)),t}};t.insert(11),t.insert(7),t.insert(5),t.insert(3),t.insert(6),t.insert(9),t.insert(8),t.insert(10),t.insert(15),t.insert(12),t.insert(14),t.insert(20),t.insert(18),t.insert(25),console.log("inOrderTraverse"),console.log(t.inOrderTraverse()),console.log("preOrderTraverse"),console.log(t.preOrderTraverse()),console.log("postOrderTraverse"),console.log(t.postOrderTraverse()),console.log("min",t.min()),console.log("max",t.max());const r=new class{highlightTimer=null;actionsContainerSelector;constructor(e,t,r=".tree",i="bst-actions-container",n={HIGHLIGHT_CLASS:"node__element--highlight",HIGHLIGHT_TIME:500}){this.treeContainerSelector=r,this.actionsContainerSelector=i,this.config=n,this.tree=e,this.render=t||this.renderTree,document.documentElement.style.setProperty("--animation-timing",this.config.HIGHLIGHT_TIME/1e3+"s")}traverseUINodes(e){e.reduce(((e,t)=>e.then((()=>this.highlightNode(t.value)))),Promise.resolve())}getTreeUI(e){const{left:t,right:r,value:i}=e;return e?`\n          <div class="node__element" data-node-id="${i}">${i}</div>\n          ${t||r?`\n                <div class="node__bottom-line"></div>\n                <div class="node__children">\n                <div class="node node--left">\n                  ${t?this.getTreeUI(t):""}\n                </div>\n                <div class="node node--right">\n                  ${r?this.getTreeUI(r):""}\n                </div>\n                </div>\n              `:""}\n        `:""}renderTree(e=this.tree.root,t=this.treeContainerSelector){const r=document.querySelector(t);if(!e)return r.innerHTML="";const i=this.getTreeUI(e);r.innerHTML=i}highlightNode(e){const t=document.querySelector(`[data-node-id="${e}"]`);return null!==this.highlightTimer?(clearTimeout(this.highlightTimer),t.classList.remove(this.config.HIGHLIGHT_CLASS),void(this.highlightTimer=null)):(t.classList.add(this.config.HIGHLIGHT_CLASS),document.querySelectorAll("button").forEach((e=>{e.setAttribute("disabled",!0)})),new Promise((e=>{this.highlightTimer=setTimeout((()=>{t.classList.remove(this.config.HIGHLIGHT_CLASS),document.querySelectorAll("button").forEach((e=>{e.removeAttribute("disabled")})),this.highlightTimer=null,e()}),this.config.HIGHLIGHT_TIME)})))}onHeightTreeBtnClick(){const e=this.tree.height();e?alert("Height of tree is "+e):alert("There is no tree")}onRemoveElementBtnClick(){const e=prompt("Enter element to remove from the tree");this.tree.remove(parseInt(e))?this.render(this.tree.root):alert("Element not found")}onInsertBtnClick(){const e=prompt("Enter element to add to tree");e&&(this.tree.insert(parseInt(e)),this.render(this.tree.root))}onMinValueBtnClick(){const e=this.tree.min();e?this.highlightNode(e):alert("Node not found")}onMaxValueBtnClick(){const e=this.tree.max();e?this.highlightNode(e):alert("Node not found")}onSearchBtnClick(){const e=prompt("Enter the node value to search in the tree"),t=this.tree.search(parseInt(e));t?this.highlightNode(t.value):alert("Node not found")}onPreOrderTravBtnClick(){const e=this.tree.preOrderTraverse();this.traverseUINodes(e),console.log(e)}onInOrderTravBtnClick(){const e=this.tree.inOrderTraverse();this.traverseUINodes(e),console.log(e)}onPostOrderTravBtnClick(){const e=this.tree.postOrderTraverse();this.traverseUINodes(e),console.log(e)}onResetBtnClick(){this.tree.root=null,this.render(this.tree.root)}init(){const e=document.querySelector("#heightTreeBtn"),t=document.querySelector("#insertBtn"),r=document.querySelector("#removeElementBtn"),i=document.querySelector("#minValueBtn"),n=document.querySelector("#maxValueBtn"),s=document.querySelector("#searchBtn"),o=document.querySelector("#preOrderTravBtn"),l=document.querySelector("#inOrderTravBtn"),h=document.querySelector("#postOrderTravBtn"),c=document.querySelector("#resetBtn");e.addEventListener("click",this.onHeightTreeBtnClick.bind(this)),r.addEventListener("click",this.onRemoveElementBtnClick.bind(this)),t.addEventListener("click",this.onInsertBtnClick.bind(this)),i.addEventListener("click",this.onMinValueBtnClick.bind(this)),n.addEventListener("click",this.onMaxValueBtnClick.bind(this)),s.addEventListener("click",this.onSearchBtnClick.bind(this)),o.addEventListener("click",this.onPreOrderTravBtnClick.bind(this)),l.addEventListener("click",this.onInOrderTravBtnClick.bind(this)),h.addEventListener("click",this.onPostOrderTravBtnClick.bind(this)),c.addEventListener("click",this.onResetBtnClick.bind(this))}}(t,null,".tree");r.init(),r.render()})()}();